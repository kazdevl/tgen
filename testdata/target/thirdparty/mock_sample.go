// Code generated by MockGen. DO NOT EDIT.
// Source: sample.go

// Package thirdparty is a generated GoMock package.
package thirdparty

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFSampleClient is a mock of IFSampleClient interface.
type MockIFSampleClient struct {
	ctrl     *gomock.Controller
	recorder *MockIFSampleClientMockRecorder
}

// MockIFSampleClientMockRecorder is the mock recorder for MockIFSampleClient.
type MockIFSampleClientMockRecorder struct {
	mock *MockIFSampleClient
}

// NewMockIFSampleClient creates a new mock instance.
func NewMockIFSampleClient(ctrl *gomock.Controller) *MockIFSampleClient {
	mock := &MockIFSampleClient{ctrl: ctrl}
	mock.recorder = &MockIFSampleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFSampleClient) EXPECT() *MockIFSampleClientMockRecorder {
	return m.recorder
}

// GenrateRandomName mocks base method.
func (m *MockIFSampleClient) GenrateRandomName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenrateRandomName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenrateRandomName indicates an expected call of GenrateRandomName.
func (mr *MockIFSampleClientMockRecorder) GenrateRandomName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenrateRandomName", reflect.TypeOf((*MockIFSampleClient)(nil).GenrateRandomName))
}
