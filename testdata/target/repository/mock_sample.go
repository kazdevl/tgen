// Code generated by MockGen. DO NOT EDIT.
// Source: sample.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIFSampleRepository is a mock of IFSampleRepository interface.
type MockIFSampleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFSampleRepositoryMockRecorder
}

// MockIFSampleRepositoryMockRecorder is the mock recorder for MockIFSampleRepository.
type MockIFSampleRepositoryMockRecorder struct {
	mock *MockIFSampleRepository
}

// NewMockIFSampleRepository creates a new mock instance.
func NewMockIFSampleRepository(ctrl *gomock.Controller) *MockIFSampleRepository {
	mock := &MockIFSampleRepository{ctrl: ctrl}
	mock.recorder = &MockIFSampleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFSampleRepository) EXPECT() *MockIFSampleRepositoryMockRecorder {
	return m.recorder
}

// GetLastSaveTime mocks base method.
func (m *MockIFSampleRepository) GetLastSaveTime(i int) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSaveTime", i)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSaveTime indicates an expected call of GetLastSaveTime.
func (mr *MockIFSampleRepositoryMockRecorder) GetLastSaveTime(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSaveTime", reflect.TypeOf((*MockIFSampleRepository)(nil).GetLastSaveTime), i)
}

// GetName mocks base method.
func (m *MockIFSampleRepository) GetName(i int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName", i)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetName indicates an expected call of GetName.
func (mr *MockIFSampleRepositoryMockRecorder) GetName(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIFSampleRepository)(nil).GetName), i)
}

// Update mocks base method.
func (m *MockIFSampleRepository) Update(i int, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", i, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIFSampleRepositoryMockRecorder) Update(i, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIFSampleRepository)(nil).Update), i, name)
}
